"""
Telegram handlers: –∫–æ–º–∞–Ω–¥—ã –∏ callback query.
–í—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≤–∏–º –∏ –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã TeleBot –Ω–µ –ø–∞–¥–∞–ª.
"""
import html
from telebot import types
from telebot.types import Message, CallbackQuery

from app.core.base_bot import bot
from app.utils.logger import logger
from app.core import use_cases


# /start
@bot.message_handler(commands=["start"])
def cmd_start(message: Message):
    try:
        user = use_cases.get_or_create_user(message.from_user)

        text = (
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name or '–≥–æ—Å—Ç—å'}!\n"
            "–Ø ‚Äì –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –ø–æ –≥–æ—Ä–æ–¥—É üåÜ.\n"
            "–ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è:\n"
            "‚Ä¢ –≥–¥–µ –ø–æ–µ—Å—Ç—å üçî\n"
            "‚Ä¢ —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üé≠\n"
            "‚Ä¢ –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å –≤–µ—á–µ—Ä–æ–º üé∂\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å!"
        )

        bot.send_message(message.chat.id, text, parse_mode=None)

    except Exception as e:
        logger.exception("Error in /start handler")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


# /help
@bot.message_handler(commands=["help"])
def cmd_help(message: Message):
    try:
        text = "–ò—Å–ø–æ–ª—å–∑—É–π /categories –∏–ª–∏ /search <–∑–∞–ø—Ä–æ—Å>. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é üìç"
        bot.send_message(message.chat.id, text, parse_mode=None)
    except Exception:
        logger.exception("Error in /help")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help")


# /categories
@bot.message_handler(commands=["categories"])
def cmd_categories(message: Message):
    try:
        cats = use_cases.list_categories()
        if not cats:
            bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
            return

        markup = types.InlineKeyboardMarkup()
        for c in cats:
            markup.add(types.InlineKeyboardButton(text=c.name, callback_data=f"cat:{c.id}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
    except Exception:
        logger.exception("Error in /categories")
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")


# /search
@bot.message_handler(commands=["search"])
def cmd_search(message: Message):
    try:
        args = message.text.partition(" ")[2].strip()
        if not args:
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>")
            return

        results = use_cases.search_places(args)
        if not results:
            bot.send_message(message.chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        for p in results[:10]:
            text = f"<b>{html.escape(p.name)}</b>\n"
            if p.address:
                text += html.escape(p.address) + "\n"
            if p.description:
                text += html.escape(p.description[:200])

            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"place:{p.id}"))
            bot.send_message(message.chat.id, text, reply_markup=kb, parse_mode="HTML")
    except Exception:
        logger.exception("Error in /search")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–¥–Ω–µ–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ / –º–µ—Å—Ç–∞ / –∏–∑–±—Ä–∞–Ω–Ω–æ–µ)
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call: CallbackQuery):
    try:
        data = call.data or ""
        if data.startswith("cat:"):
            cat_id = int(data.split(":")[1])
            places = use_cases.get_places_by_category(cat_id)
            if not places:
                bot.answer_callback_query(call.id, "–ú–µ—Å—Ç–∞ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            text = f"–ú–µ—Å—Ç–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(places)}):"
            kb = types.InlineKeyboardMarkup()
            for p in places[:20]:
                kb.add(types.InlineKeyboardButton(p.name, callback_data=f"place:{p.id}"))
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=text,
                                  reply_markup=kb)

        elif data.startswith("place:"):
            place_id = int(data.split(":")[1])
            p = use_cases.get_place(place_id)
            if not p:
                bot.answer_callback_query(call.id, "–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            parts = [f"<b>{html.escape(p.name)}</b>"]
            if p.address:
                parts.append(f"üìç {html.escape(p.address)}")
            if p.description:
                parts.append(html.escape(p.description))
            if p.category:
                parts.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {html.escape(p.category.name)}")
            text = "\n\n".join(parts)

            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_add:{p.id}"))
            kb.add(types.InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=p.name))
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=text,
                                  reply_markup=kb,
                                  parse_mode="HTML")

        elif data.startswith("fav_add:"):
            place_id = int(data.split(":")[1])
            user = use_cases.get_or_create_user(call.from_user)
            use_cases.add_favorite(user.id, place_id)
            bot.answer_callback_query(call.id, "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚úÖ")

        else:
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    except Exception:
        logger.exception("Error in callback handler")
        try:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")
        except Exception:
            pass


# –≠—Ö–æ (fallback)
@bot.message_handler(func=lambda m: True)
def fallback_echo(message: Message):
    try:
        if message.location:
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–æ–∫–∞—Ü–∏—é! –°–∫–æ—Ä–æ —è –Ω–∞—É—á—É—Å—å –∏—Å–∫–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è —Ä—è–¥–æ–º üó∫Ô∏è")
            return
        bot.send_message(message.chat.id, f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {message.text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
    except Exception:
        logger.exception("Error in fallback handler")
